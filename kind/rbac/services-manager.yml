apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: services-manager
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["services"]
  verbs: ["get", "watch", "list", "update", "delete", "create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: services-manager-binding
subjects:
- kind: Group
  name: infrastructure:default
  #namespace: default
  apiGroup: rbac.authorization.k8s.io  
roleRef:
  kind: ClusterRole
  name: services-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: services-manager-kubesystem-binding
subjects:
- kind: ServiceAccount
  name: default
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: services-manager
  apiGroup: rbac.authorization.k8s.io

# kubectl create clusterrole "services-manager" --verb=get,watch,list,update,delete,create,patch --resource=services
# kubectl create clusterrolebinding services-manager-binding --clusterrole=services-manager --serviceaccount=default:default